// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"setPartyB","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"setArbitrator2","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr1","type":"address"},{"name":"addr2","type":"address"}],"name":"setArbitrator1and2","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"raiseDispute","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"setArbitrator0","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"setPartyA","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "60606040526001805460ff191660ff179055600160a060020a033216600090815260036020526040902061271090556103b28061003c6000396000f36060604052361561006c5760e060020a60003504634d47ae8c811461006e57806353a4aa511461008757806362c47064146100d65780636daa2d441461014e5780637a3e0013146101ad57806390b98a11146101fc578063ab624cf1146102bb578063f8b2cb4f146102e6575b005b60028054600160a060020a03191660043517905561006c565b61006c6004358060006000506002815481101561000257508052507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658054600160a060020a0319169091179055565b61006c60043560243560008054819081101561000257508080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56354600160a060020a03161480610130575081600160a060020a03166000145b80610144575080600160a060020a03166000145b1561031257610002565b61006c60015433600160a060020a03908116610100909204161480610181575060025433600160a060020a039081169116145b156101ab576002805474ff0000000000000000000000000000000000000000191660a060020a1790555b565b61006c6004358060006000506000815481101561000257508052507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638054600160a060020a0319169091179055565b610302600435602435600154600090810b810b8190128061024057506001546101009004600160a060020a03168114806102405750600254600160a060020a031681145b8061024d57508054600390105b806102b1575060025460a060020a900460ff1680156102b1575060015481548291820b820b90811015610002579080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563015433600160a060020a03908116911614155b1561030c57610002565b6001805474ffffffffffffffffffffffffffffffffffffffff0019166101006004350217905561006c565b600160a060020a03600435166000908152600360205260409020545b6060908152602090f35b92915050565b8160006000506001815481101561000257507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564906101000a815481600160a060020a0302191690830217905550806000600050600281548110156100025750507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658054600160a060020a031916909117905550506001805460ff1916905556",
    unlinked_binary: "60606040526001805460ff191660ff179055600160a060020a033216600090815260036020526040902061271090556103b28061003c6000396000f36060604052361561006c5760e060020a60003504634d47ae8c811461006e57806353a4aa511461008757806362c47064146100d65780636daa2d441461014e5780637a3e0013146101ad57806390b98a11146101fc578063ab624cf1146102bb578063f8b2cb4f146102e6575b005b60028054600160a060020a03191660043517905561006c565b61006c6004358060006000506002815481101561000257508052507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658054600160a060020a0319169091179055565b61006c60043560243560008054819081101561000257508080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56354600160a060020a03161480610130575081600160a060020a03166000145b80610144575080600160a060020a03166000145b1561031257610002565b61006c60015433600160a060020a03908116610100909204161480610181575060025433600160a060020a039081169116145b156101ab576002805474ff0000000000000000000000000000000000000000191660a060020a1790555b565b61006c6004358060006000506000815481101561000257508052507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638054600160a060020a0319169091179055565b610302600435602435600154600090810b810b8190128061024057506001546101009004600160a060020a03168114806102405750600254600160a060020a031681145b8061024d57508054600390105b806102b1575060025460a060020a900460ff1680156102b1575060015481548291820b820b90811015610002579080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563015433600160a060020a03908116911614155b1561030c57610002565b6001805474ffffffffffffffffffffffffffffffffffffffff0019166101006004350217905561006c565b600160a060020a03600435166000908152600360205260409020545b6060908152602090f35b92915050565b8160006000506001815481101561000257507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564906101000a815481600160a060020a0302191690830217905550806000600050600281548110156100025750507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5658054600160a060020a031916909117905550506001805460ff1916905556",
    address: "0xadf0266dbd5a2b853d5c3599d12fe689063b68f3",
    generated_with: "2.0.6",
    contract_name: "MetaCoin"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: lease call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.MetaCoin = Contract;
  }

})();
